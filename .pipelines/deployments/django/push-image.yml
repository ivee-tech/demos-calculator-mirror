trigger:
  none

stages:
- stage: Build_Web_Api_Image
  variables:
  - name: acrName
    value: 'acr85618'
  - name: registry
    value: $(acrName).azurecr.io
  - name: rns
    value: itp
  jobs:
  - job: Build_Push_ACR_Image
    pool:
      name: 'Demos'
    steps:
    - script: |
        cd $(Pipeline.Workspace)/s/django/sample-app
        dockerfile_path="./Dockerfile"
        line=$(grep -E 'LABEL VERSION=' "$dockerfile_path")
        regex='[0-9]+\.[0-9]+\.[0-9]+'
        [[ $line =~ $regex ]] && tag="${BASH_REMATCH[0]}"
        echo "Existing tag: $tag"
        newTag=$tag
        # you can upgrade the tag here, but needs sync with source control
        # IFS='.' read -ra ADDR <<< "$tag"
        # major=${ADDR[0]}
        # minor=${ADDR[1]}
        # patch=${ADDR[2]}
        # # Increment the patch version
        # let patch++
        # # Construct the new tag
        # newTag="$major.$minor.$patch"
        echo "New tag: $newTag"
        echo "##vso[task.setvariable variable=newTag]$newTag"
      displayName: 'Obtain Version'
    - script: |
        img="sample-django-app:$NEWTAG"
        echo "##vso[task.setvariable variable=img]$img"
        az login --identity
        az acr login --name $ACRNAME
        cd $(Pipeline.Workspace)/s/django/sample-app
        docker build -t $img .
        docker tag ${img} $REGISTRY/$RNS/$img
      displayName: 'Build container image'
      env:
        newTag: $(newTag)
    # - task: trivy@1
    #   inputs:
    #     image: $(REGISTRY)/$(RNS)/$(IMG)
    - script: |
        # for JUnit use: --format template --template "@contrib/junit.tpl"
        # for JSON use: --format json
        # for SARIF use: --format template --template "@contrib/sarif.tpl"
        docker run --rm -v /home/sysadmin/.docker:/root/.docker -v /tmp/results:/app/results \
          daradu/trivy:0.53.0 image $(REGISTRY)/$(RNS)/$(IMG) \
          --exit-code 0 --format template --template "@contrib/junit.tpl" --output /app/results/trivy-results.xml \
          --scanners vuln,config,secret
      displayName: 'Run trivy vulnerability scanner'
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '/tmp/results/*-results.xml'
    - task: PublishPipelineArtifact@1
      inputs:
        path: '/tmp/results'
        artifactName: 'results'
        artifactType: 'pipeline'
    - script: |
        docker push $(REGISTRY)/$(RNS)/$(IMG)
      displayName: 'Push container image to ACR'
